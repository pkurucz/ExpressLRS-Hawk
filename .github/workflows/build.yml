name: Build ExpressLRS
on: [push, pull_request]
jobs:
  test:
    runs-on: ubuntu-latest
    steps:

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.target }}

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        pip install wheel

    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-platformio

    - name: Run PlatformIO Tests
      run: |
        platformio platform install native
        platformio platform update
        cd src
        PLATFORMIO_BUILD_FLAGS="-DRegulatory_Domain_ISM_2400" pio test -e native

  targets:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.set-targets.outputs.targets }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - id: set-targets
      run: echo "::set-output name=targets::[$( (grep -r "\[env:.*STLINK\]" src/targets/ ; grep "\[env:.*UART\]" src/targets/unified.ini) | sed 's/.*://' | sed s/.$// | egrep "(STLINK|UART)" | grep -v DEPRECATED | tr '\n' ','  | sed 's/,$/"\n/' | sed 's/,/","/'g | sed 's/^/"/')]"

  build:
    needs: targets
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.targets.outputs.targets)}}
    runs-on: ubuntu-latest
    steps:

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1

    - name: Cache pip
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.target }}

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
        pip install wheel

    - name: Cache PlatformIO
      uses: actions/cache@v2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-platformio

    - name: Run PlatformIO
      run: |
        platformio platform update
        platformio platform install native
        mkdir -p ~/artifacts
        cd src
        case ${{matrix.target}} in
          *2400* | FM30*)
            # release builds
            PLATFORMIO_BUILD_FLAGS="-DRegulatory_Domain_EU_CE_2400 -DUSE_DIVERSITY" pio run -e ${{ matrix.target }}
            mkdir ~/artifacts/LBT/
            mv .pio/build/${{ matrix.target }} ~/artifacts/LBT/`echo ${{ matrix.target }} | sed s/_via.*//`
            PLATFORMIO_BUILD_FLAGS="-DRegulatory_Domain_ISM_2400 -DUSE_DIVERSITY" pio run -e ${{ matrix.target }}
            mkdir ~/artifacts/FCC/
            mv .pio/build/${{ matrix.target }} ~/artifacts/FCC/`echo ${{ matrix.target }} | sed s/_via.*//`
            ;;
          PK_HAWK_400*)
            export REG=-DRegulatory_Domain_FCC_433
            ;;
          *)
            # release build
            PLATFORMIO_BUILD_FLAGS="-DRegulatory_Domain_FCC_915 -DUSE_DIVERSITY" pio run -e ${{ matrix.target }}
            mkdir ~/artifacts/FCC/
            mv .pio/build/${{ matrix.target }} ~/artifacts/FCC/`echo ${{ matrix.target }} | sed s/_via.*//`
            ;;
        esac
        if [[ ${{matrix.target}} == *ESP32* ]] ; then 
          cp ~/.platformio/packages/framework-arduinoespressif32/tools/sdk/bin/bootloader_dio_40m.bin ~/artifacts/
          cp ~/.platformio/packages/framework-arduinoespressif32/tools/partitions/boot_app0.bin ~/artifacts/
        fi

    - name: Store Artifacts
      uses: actions/upload-artifact@v2-preview
      with:
        name: ExpressLRS-${{ env.GITHUB_REF_SLUG_URL }}-${{ github.run_number }}
        path: |
          ~/artifacts/**/*.bin
          ~/artifacts/**/*.elrs
      continue-on-error: true
